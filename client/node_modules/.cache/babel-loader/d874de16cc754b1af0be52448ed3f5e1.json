{"ast":null,"code":"module.exports = intersect;\n\nfunction many(sets) {\n  var o = {};\n  var l = sets.length - 1;\n  var first = sets[0];\n  var last = sets[l];\n\n  for (var i in first) {\n    o[first[i]] = 0;\n  }\n\n  for (var i = 1; i <= l; i++) {\n    var row = sets[i];\n\n    for (var j in row) {\n      var key = row[j];\n      if (o[key] === i - 1) o[key] = i;\n    }\n  }\n\n  var a = [];\n\n  for (var i in last) {\n    var key = last[i];\n    if (o[key] === l) a.push(key);\n  }\n\n  return a;\n}\n\nfunction intersect(a, b) {\n  if (!b) return many(a);\n  var res = [];\n\n  for (var i = 0; i < a.length; i++) {\n    if (indexOf(b, a[i]) > -1) res.push(a[i]);\n  }\n\n  return res;\n}\n\nintersect.big = function (a, b) {\n  if (!b) return many(a);\n  var ret = [];\n  var temp = {};\n\n  for (var i = 0; i < b.length; i++) {\n    temp[b[i]] = true;\n  }\n\n  for (var i = 0; i < a.length; i++) {\n    if (temp[a[i]]) ret.push(a[i]);\n  }\n\n  return ret;\n};\n\nfunction indexOf(arr, el) {\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] === el) return i;\n  }\n\n  return -1;\n}","map":null,"metadata":{},"sourceType":"script"}