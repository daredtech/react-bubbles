{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nexports.default = function () {\n  var _size = [1, 1];\n  var actualSize = [0, 0];\n  var _nodeSize = false;\n  var _bands = false;\n  var _padding = [0, 0];\n\n  var _cols = void 0;\n\n  var _rows = void 0;\n\n  var nodes = void 0;\n  var count = void 0;\n  var result = null;\n\n  var _layout = function _layout() {\n    var i = -1;\n    var tmpCols = _cols || 0;\n    var tmpRows = _rows || 0;\n    var col = void 0;\n    var row = void 0;\n    var x = void 0;\n    var y = void 0; // FIXME: make explicit rows/cols exclusive? Or find a smart way to deal\n    // with overflows (repeat?)\n    // FIXME: when rows are set, fill top-to-bottom (make test with 5 data points and 4 rows)\n\n    if (tmpRows && !tmpCols) {\n      tmpCols = Math.ceil(count / tmpRows);\n    } else {\n      if (!tmpCols) tmpCols = Math.ceil(Math.sqrt(count));\n      if (!tmpRows) tmpRows = Math.ceil(count / tmpCols);\n    }\n\n    if (_nodeSize) {\n      x = (0, _d3Scale.scaleOrdinal)().domain((0, _d3Array.range)(tmpCols)).range((0, _d3Array.range)(0, (_size[0] + _padding[0]) * tmpCols, _size[0] + _padding[0]));\n      y = (0, _d3Scale.scaleOrdinal)().domain((0, _d3Array.range)(tmpRows)).range((0, _d3Array.range)(0, (_size[1] + _padding[1]) * tmpRows, _size[1] + _padding[1]));\n      actualSize[0] = _bands ? x(tmpCols - 1) + _size[0] : x(tmpCols - 1);\n      actualSize[1] = _bands ? y(tmpRows - 1) + _size[1] : y(tmpRows - 1);\n    } else if (_bands) {\n      x = (0, _d3Scale.scaleBand)().domain((0, _d3Array.range)(tmpCols)).range([0, _size[0]]).paddingInner(_padding[0]).paddingOuter(0);\n      y = (0, _d3Scale.scaleBand)().domain((0, _d3Array.range)(tmpRows)).range([0, _size[1]]).paddingInner(_padding[1]).paddingOuter(0);\n      actualSize[0] = x.bandwidth();\n      actualSize[1] = y.bandwidth();\n    } else {\n      x = (0, _d3Scale.scalePoint)().domain((0, _d3Array.range)(tmpCols)).range([0, _size[0]]);\n      y = (0, _d3Scale.scalePoint)().domain((0, _d3Array.range)(tmpRows)).range([0, _size[1]]);\n      actualSize[0] = x(1);\n      actualSize[1] = y(1);\n    }\n\n    var newLayout = [];\n\n    while (++i < count) {\n      col = i % tmpCols;\n      row = Math.floor(i / tmpCols);\n      newLayout.push((0, _assign2.default)({}, nodes[i], {\n        x: x(col),\n        y: y(row)\n      }));\n    }\n\n    _cols = tmpCols;\n    _rows = tmpRows;\n    return newLayout;\n  };\n\n  var grid = {\n    size: function size(value) {\n      if (!(0, _itsSet2.default)(value)) return _nodeSize ? actualSize : _size;\n      actualSize = [0, 0];\n      _nodeSize = (_size = value) == null;\n      return this;\n    },\n    nodeSize: function nodeSize(value) {\n      if (!(0, _itsSet2.default)(value)) return _nodeSize ? _size : actualSize;\n      actualSize = [0, 0];\n      _nodeSize = (_size = value) != null;\n      return this;\n    },\n    rows: function rows(value) {\n      if (!(0, _itsSet2.default)(value)) return _rows;\n      _rows = value;\n      return this;\n    },\n    cols: function cols(value) {\n      if (!(0, _itsSet2.default)(value)) return _cols;\n      _cols = value;\n      return this;\n    },\n    bands: function bands(value) {\n      if (!(0, _itsSet2.default)(value)) return _bands;\n      _bands = value;\n      return this;\n    },\n    padding: function padding(value) {\n      if (!(0, _itsSet2.default)(value)) return _padding;\n      _padding = value;\n      return this;\n    },\n    data: function data(value) {\n      if (!(0, _itsSet2.default)(value)) return nodes;\n      nodes = value;\n      count = nodes.length;\n      return this;\n    },\n    layout: function layout() {\n      result = _layout();\n      return this;\n    },\n    nodes: function nodes() {\n      return result;\n    }\n  };\n  return grid;\n};\n\nvar _d3Array = require('d3-array');\n\nvar _d3Scale = require('d3-scale');\n\nvar _itsSet = require('its-set');\n\nvar _itsSet2 = _interopRequireDefault(_itsSet);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}","map":null,"metadata":{},"sourceType":"script"}